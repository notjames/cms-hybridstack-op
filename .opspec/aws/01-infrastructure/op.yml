---
name: aws/01-infrastructure
description: create the AWS infrastructure for k8s using CF
inputs:
  HOMEPath:
    string:
      description: HOME env variable as a string
  HOMEDir:
    dir:
      description: HOME env variable as a directory
  USER:
    string:
      description: USER env variable
  GID:
    number:
      description: GID env var
  UID:
    number:
      description: UID env var
  CLUSTER_ID:
    string:
      description: CLUSTER_ID environment variable
  CLUSTER_TYPE:
    string:
      constraints: { enum: [ manager, managed, nil ] }
      description: CLUSTER_TYPE environment variable if set.
      default: "nil"
  INSTANCE_OS_NAME:
    string:
      description: INSTANCE_OS_NAME environment variable if set.
      default: "centos"
  INSTANCE_OS_VER:
    string:
      description: INSTANCE_OS_VER environment variable if set.
      default: "7.4"
  INSTANCE_TYPE:
    string:
      description: INSTANCE_TYPE environment variable if set.
      default: "c4.large"
  AVAILABILITY_ZONE:
    string:
      description: AWS AZ environment variable if set.
      default: "us-west-2b"
  AWS_DEFAULT_REGION:
    string:
      description: default AWS region environment variable if set.
      default: "us-west-2"
  DISK_SIZE_GB:
    number:
      description: The environment variable for DISK_SIZE_GB if set.
      default: 40
  SSH_LOCATION:
    string:
      description: The environment variable for SSH_LOCATION if set.
      default: "0.0.0.0/0"
  K8S_NODE_CAPACITY:
    number:
      description: Kubernetes node capacity
      default: 1
  OS_TYPE:
    string:
      description: OS_TYPE environment variable if set.
      default: centos

  cluster_id:
    string:
      constraints: { minLength: 1 }
      description: Name of the cluster
      default: "nil"
  cluster_type:
    string:
      constraints: { enum: [ manager, managed, nil ] }
      description: Define if the cluster being created is a manager or managed cluster.
      default: "nil"
  instance_os_name:
    string:
      constraints: { minLength: 1 }
      description: This a required parameter for the make-cluster-nodes script.
      default: centos
  instance_os_ver:
    number:
      description: distribution version
      default: 7.4
  instance_type:
    string:
      constraints: { minLength: 1 }
      description: Instance type. Reference CF template for more information.
      default: c4.large
  availability_zone:
    string:
      constraints: { minLength: 1 }
      description: AWS AZ
      default: us-west-2b
  aws_default_region:
    string:
      constraints: { minLength: 1 }
      description: default AWS region
      default: us-west-2
  disk_size_gb:
    number:
      description: AWS instance disk size in Gb.
      default: 40
  ssh_location:
    string:
      description: AWS ssh_location
      default: 0.0.0.0/0
  k8s_node_capacity:
    number:
      description: The environment variable for K8S_NODE_CAPACITY if set.
      default: 1
  os_type:
    string:
      constraints: { minLength: 1 }
      default: centos

  mount_bin_runroot:
    dir:
      description: the bin directory containing scripts used for all AWS op steps.
  mount_infra_runroot:
    dir:
      description: the mount point path for all things infrasructure
  context:
    dir:
      description: context for build
      default: .opspec/aws
  dockerfile:
    file:
      description: DinD dockerfile
      default: .opspec/aws/Dockerfile
  dockerSocket:
    socket:
      description: access to docker on node
  dindcontainer:
    string:
      description: "dind runtime container"
      default: "cmc-build:latest"

outputs:
  aws_access_id:
    string:
      description: exported AWS creds access id
  aws_secret_key:
    string:
      description: exported AWS creds access key

run:
  serial:

  - container:
      image: { ref: $(dindcontainer) }
      stdOut:
        AWS_ACCESS_KEY_ID=: aws_access_id
        AWS_SECRET_ACCESS_KEY=: aws_secret_key
      dirs:
        /root/bin: $(mount_bin_runroot)
        /root/.aws: $(HOMEDir/.aws)
      workDir: /root
      sockets:
        /var/run/docker.sock: dockerSocket
      cmd:
        - sh
        - -ce
        - |
          bin/export_aws_creds | tr ' ' '\n'

  - container:
      image: { ref: $(dindcontainer) }
      dirs:
        /root: $(mount_infra_runroot)
        /root/.ssh: $(HOMEDir/.ssh)
        /root/bin: $(mount_bin_runroot)
      workDir: /root
      sockets:
        /var/run/docker.sock: dockerSocket
      envVars:
        AWS_ACCESS_KEY_ID: $(aws_access_id)
        AWS_SECRET_ACCESS_KEY: $(aws_secret_key)
        CLUSTER_ID: $(CLUSTER_ID)
        _cluster_id: $(cluster_id)
        CLUSTER_TYPE: $(CLUSTER_TYPE)
        _cluster_type: $(cluster_type)
        INSTANCE_TYPE: $(INSTANCE_TYPE)
        _instance_type: $(instance_type)
        AVAILABILITY_ZONE: $(AVAILABILITY_ZONE)
        _availability_zone: $(availability_zone)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
        _aws_default_region: $(aws_default_region)
        INSTANCE_OS_NAME: $(INSTANCE_OS_NAME)
        _instance_os_name: $(instance_os_name)
        CLUSTER_USERNAME: $(INSTANCE_OS_NAME)
        _cluster_username: $(instance_os_name)
        INSTANCE_OS_VER: $(INSTANCE_OS_VER)
        _instance_os_ver: $(instance_os_ver)
        OWNER_USER: $(USER)
        OWNER_UID: $(UID)
        OWNER_GID: $(GID)
      files:
        /cmd.sh:
      cmd: [ /cmd.sh ]

